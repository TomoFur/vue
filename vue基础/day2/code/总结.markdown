# Vue基础第二天总结

## 定义全局过滤器和自定义过滤器

### 全局过滤器

```javascript
定义：Vue.filter('过滤器名称'，function(arg1,arg2....){})
调用：{{ msg|过滤器(arg1，args2...)}}
//过滤器里面的处理函数的所有参数中，第一个参数已经被默认了就是使用该过滤器要处理的字符串，在调用该过滤器时传入的参数只能从第二个开始排起来。
```

### 私有过滤器

```javascript
var app = new Vue({
    el:'#app',
    data:{},
    methods:{},
    filters:{
        过滤器名称：function(arg1,arg2....){}//这里的函数以及函数的参数和全局过滤器一样
    }
});
```



**过滤器注意事项**

+ vue实例对过滤器的使用采用的是就近原则，即如果自身上有定义该名称的私有过滤器，就采用这个私有过滤器，如果没有，再找全局过滤器

## 定义全局自定义指令和私有指令

### 全局自定义指令

```javascript
定义：Vue.constructor('指令名称',{
    bind:function(el){},
    inserted:function(el){},
    updated:function(el){}
});
```

```html
使用：
<p v-指令名称>
    ....
</p>
```

### 私有指令

```javascript
var app = new Vue({
    el:'#app',
    data:{},
    methods:{},
    constructors:{
        指令名：{
          bind:function(el){},
    	 inserted:function(el){},
    	 updated:function(el){}
        }
    }
});
```

**自定义指令注意事项**

- 在定义指令时候，指令名称不需要加v-，在使用的时候，要加v-

- el是一个原生的js对象，即DOM对象，表示该指令所绑定的元素

- ```javascript
  //如果在绑定指令的时候要传参的话，使用：<p v-指令名称=‘要传递的参数/或者表达式’></P>
  //在接收时时这个样子的(以bind为例):
  bind:function(el,binding){
     //通过binding.value来获取到传入的参数或者是表达式的值
     //通过binding.expression来获取到传入的表达式(没有经过运算)
  }
  ```

- 一般情况下，和行为有关的指令绑定在inserted上，和样式相关的指令绑定在bind上。

## 按键修饰符

在监听键盘事件的时候，经常需要检查一些按键的值，vue允许我们在监听键盘事件的收时候添加按键修饰符，演示如下

```html 
<input @keyup.enter='响应函数'>
```



**注意**

经过这样之后，只有在按了enter键之后才会触发到这个响应函数，其他类似的键盘修饰符还有  **del**  **space** **tab**  **up** **down** **left** **right**

### 自定义按键修饰符

有的按键vue没有指定响应的按键修饰符，就需要我们自己自定义按键修饰符 方法如下：

```javascript
Vue.config.keyCode.名称=按键值
示例：Vue.config.keyCode.F2=112//这样就自己自定义了一个名为F2的按键修饰符
使用：<input @keyup.F2='响应函数'>
```

## VUE生命周期

### 创建阶段

```javascript
1.beforeCreate(){}//这是一个vue实例的第一个生命周期函数，在这个阶段，vue实例上的data中的数落和methods中的方法都不可以使用。
2.created(){}//这是一个vue实例的第二个生命周期函数，要想使用vue实例上的data中的数落和methods中的方法，最早只能够在此阶段。
3.beforemount(){}//这是一个vue实例的第三个生命周期函数，在此阶段，已经在内存中生成了虚拟DOM树，但是尚未挂载到页面上，所以，此时页面上的元素中的数据还没有真正的替换过来，所以里面的内容还是之前写的插值表达式。
4.mounted(){}//这是一个vue实例的第四个生命周期函数，也是vue实例创建阶段的最后一个生命函数，在这个阶段，模板已经挂载到了页面上，数据也进行了替换，不再是插值表达式。如果想要操作DOM元素，最早可在该阶段进行。
```

### 运行阶段

```javascript
1.beforeUpdate(){}//这是运行阶段的第一个生命周期函数，在vue实例中data中的数据发生改变的时候才会触发，但是，在这个阶段，虽然data中的数据已经改变，页面中的数据还是尚未改变的数据，此时，页面还没有同步新的数据。
2.updated(){}//但是，在这个阶段，data中的数据已经改变，页面中的数据已经改变，此时，页面已经同步新的数据。
```

### 销毁阶段

```javascript
1.beforeDestory(){}//在这个阶段，vue实例中的data中的数据和methods中的方法尚可以使用。
2.destoryed(){}//在这个阶段,vue实例中的data中的数据和methods中的方法已经不可以使用。
```









## 









